Features/Stories to finish:
JQuery basic frontend to monitor
code provision certificate from AWS

Later:
Add action delete things
Add action to delete certificates
Add action to delete policies

Done:
initial commit
Add mqtt gem
Add AWS-IOT gem
Add Root CA Certificate
Add jquery support
Add Bootstrap support
Add home controller with index action stub
Configure AWS credentials as ENV variables
Add action to list things
Add action to list certificates
Add action to list policies
client: create client stub code in public
client: code to load and process config
cert provision endpoint stub
client: thread to pump data to common thread
client: thread to process
redis integration
New Thread to listen to data_stream mqtt
New API to send command to any device : stub

Dummy Code:

resp = client.create_thing({
    thing_name: "karthik-created",
    thing_type_name: "karthik-thing-type",
    attribute_payload: {
      attributes: {
        "model-number" => "model-a",
        "serial-number" => "0002"
      },
      merge: false
    }
 })

# => #<struct Aws::IoT::Types::CreateThingResponse thing_name="karthik-created",
# thing_arn="arn:aws:iot:us-east-1:683177151963:thing/karthik-created",
# thing_id="d94c0e5b-ff8c-426e-b98e-0c52adad60c4">

resp = client.create_keys_and_certificate({
    set_as_active: true
})
filename = resp.certificate_id[0..9]
IO.write("#{filename}-certificate.pem", resp.certificate_pem)
IO.write("#{filename}-public.key", resp.key_pair.public_key)
IO.write("#{filename}-private.key", resp.key_pair.private_key)

# "arn:aws:iot:us-east-1:683177151963:cert/dbbec303325c8c31cf9725bb21a48398147b9ff4f2c6621809e367110e2754b5",
# "dbbec303325c8c31cf9725bb21a48398147b9ff4f2c6621809e367110e2754b5"

resp = client.attach_policy({
    policy_name: "karthik-policy",
    target: "arn:aws:iot:us-east-1:683177151963:cert/dbbec303325c8c31cf9725bb21a48398147b9ff4f2c6621809e367110e2754b5"
})

resp = client.attach_thing_principal({
    thing_name: "karthik-created",
    principal: "arn:aws:iot:us-east-1:683177151963:cert/dbbec303325c8c31cf9725bb21a48398147b9ff4f2c6621809e367110e2754b5"})

# if set as active is initially to false
resp = client.update_certificate({
    certificate_id: "dbbec303325c8c31cf9725bb21a48398147b9ff4f2c6621809e367110e2754b5",
    new_status: "ACTIVE"})